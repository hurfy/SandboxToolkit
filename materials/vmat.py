class Material:
    # -> Special -------------------------------------------------------------------------------------------------------
    def __init__(self, name: str, textures: dict) -> None:
        self._name     : str  = name
        self._textures : dict = textures

    def __str__(self) -> str:
        return (
            f'Name    : {self._name}'
            f'Textures: {self._textures}'
        )

    # -> Instance ------------------------------------------------------------------------------------------------------
    @property
    def name(self) -> str:
        return self._name

    @property
    def textures(self) -> dict:
        return self._textures

    def _generate_color(self) -> str:
        if (color := self._textures.get("color", None)) is not None:
            return (
                f'\t//---- Color ----\n'
                f'\tg_flModelTintAmount "1.000"\n'
                f'\tg_vColorTint "[1.000000 1.000000 1.000000 0.000000]"\n'
                f'\tTextureColor "{self._name}/{color}"'
            )

        return ''

    def _generate_translucent(self) -> str:
        if (translucent := self._textures.get("translucent", None)) is not None:
            return (
                f'\n\n\t//---- Translucent ----\n'
                f'\tF_TRANSLUCENT 1\n'
                f'\tg_flOpacityScale "1.000"\n'
                f'\tTextureTranslucency "{self._name}/{translucent}"'
            )

        return ''

    def _generate_ambient_occlusion(self) -> str:
        if (ambient_occlusion := self._textures.get("ambient_occlusion", None)) is not None:
            return (
                f'\n\n\t//---- Ambient Occlusion ----\n'
                f'\tg_flAmbientOcclusionDirectDiffuse "0.000"\n'
                f'\tg_flAmbientOcclusionDirectSpecular "0.000"\n'
                f'\tTextureAmbientOcclusion "{self._name}/{ambient_occlusion}"'
            )

        return ''

    def _generate_normal(self) -> str:
        if (normal := self._textures.get("normal", None)) is not None:
            return (
                f'\n\n\t//---- Normal ----\n'
                f'\tTextureNormal "{self._name}/{normal}"'
            )

        return ''

    def _generate_roughness(self) -> str:
        if (roughness := self._textures.get("roughness", None)) is not None:
            return (
                f'\n\n\t//---- Roughness ----\n'
                f'\tg_flRoughnessScaleFactor "1.000"\n'
                f'\tTextureRoughness "{self._name}/{roughness}"'
            )

        return ''

    def _generate_vmat(self) -> str:
        _str = (f'// THIS FILE IS AUTO-GENERATED BY S&BOX TOOLKIT | https://github.com/hurfy/SandboxToolkit'
                f'\n\nLayer0'
                f'\n{{'
                f'\n\tshader "complex.vfx"'
                f'\n\n{self._generate_parameters()}'
                f'\n\n{self._generate_color()}'
                f'{self._generate_translucent()}'
                f'{self._generate_normal()}'
                f'{self._generate_roughness()}'
                f'{self._generate_ambient_occlusion()}'
                f'\n}}')

        return _str

    def save_vmat(self, filename: str) -> None:
        with open(filename, 'w', encoding='utf-8') as file:
            file.write(self._generate_vmat())

    # -> Static --------------------------------------------------------------------------------------------------------
    @staticmethod
    def _generate_parameters() -> str:
        return (
            f'\t//---- Fade ----\n'
            f'\tg_flFadeExponent "1.000"\n\n'
            f'\t//---- Fog ----\n'
            f'\tg_bFogEnabled "1"\n\n'
            f'\t//---- Metalness ----\n'
            f'\tg_flMetalness "0.000"\n\n'
            f'\t//---- Texture Coordinates ----\n'
            f'\tg_nScaleTexCoordUByModelScaleAxis "0"\n'
            f'\tg_nScaleTexCoordVByModelScaleAxis "0"\n'
            f'\tg_vTexCoordOffset "[0.000 0.000]"\n'
            f'\tg_vTexCoordScale "[1.000 1.000]"\n'
            f'\tg_vTexCoordScrollSpeed "[0.000 0.000]"'
        )
